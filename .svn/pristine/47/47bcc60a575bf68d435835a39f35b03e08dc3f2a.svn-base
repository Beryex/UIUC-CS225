#include <iostream>
#include "polynomial.h"

using namespace std;

// Default constructor
// constructs a first-order polynomial with all coefficients set to 1.

// One-parameter constructor
// constructs a polynomial of user-supplied order with all coefficients set to 1.

// helper function to copy - IMPLEMENT ME
void Polynomial::copy_(const Polynomial &p) {
}

// helper function to destroy - IMPLEMENT ME
void Polynomial::destroy_() {
}

// Copy constructor - must use copy_() function
// constructs a new polynomial that is a copy of an existing polynomial

// Destructor - must use destroy_() function
// destroys a polynomial object

// Assignment operator - must use copy_() function
// assigns rhs Polynomial object to 'this' Polynomial object

// getPolyOrder
// returns the polynomial order

// getCoeff
// returns the coefficient of the x^i term in polynomial
// note: If the object does not contain a term with power i (e.g., 
//       i>order_), a coefficient value of zero is returned.

// setCoeff
// If i <= order_, set a term, value*x^i, in a polynomial

// addition operator
// adds two polynomials together and returns a new polynomial 


// insertion operator for output
// note: This function has been provided for you -- DO NOT CHANGE IT!
ostream & operator << (ostream &out, const Polynomial& p)
{
    bool printed = false;

    for (int i = p.order_; i >= 0; i--)
    {
        float c = p.a_[i];

        if (c != 0.0)
        {
            if (printed) out << " + ";
            printed = true;
            out << c << "*X^" << i;
        }
    }

    return out;
}
