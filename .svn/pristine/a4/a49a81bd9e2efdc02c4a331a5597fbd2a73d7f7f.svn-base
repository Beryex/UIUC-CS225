#include "cs225/PNG.h"
#include <list>
#include <iostream>

#include "colorPicker/ColorPicker.h"
#include "imageTraversal/ImageTraversal.h"

#include "Point.h"
#include "Animation.h"
#include "FloodFilledImage.h"

using namespace cs225;

/**
 * Constructs a new instance of a FloodFilledImage with a image `png`.
 * 
 * @param png The starting image of a FloodFilledImage
 */
FloodFilledImage::FloodFilledImage(const PNG & png) {
  /** @todo [Part 2] */
  png_ = png;
}

/**
 * Adds a flood fill operation to the FloodFillImage.  This function must store the operation,
 * which will be used by `animate`.
 * 
 * @param traversal ImageTraversal used for this FloodFill operation.
 * @param colorPicker ColorPicker used for this FloodFill operation.
 */
void FloodFilledImage::addFloodFill(ImageTraversal & traversal, ColorPicker & colorPicker) {
  /** @todo [Part 2] */
  traversal_.push_back(&traversal);
  colorpicker_.push_back(&colorPicker);
}

/**
 * Creates an Animation of frames from the FloodFill operations added to this object.
 * 
 * Each FloodFill operation added by `addFloodFill` is executed based on the order
 * the operation was added.  This is done by:
 * 1. Visiting pixels within the image based on the order provided by the ImageTraversal iterator and
 * 2. Updating each pixel to a new color based on the ColorPicker
 * 
 * While applying the FloodFill to the image, an Animation is created by saving the image
 * after every `frameInterval` pixels are filled.  To ensure a smooth Animation, the first
 * frame is always the starting image and the final frame is always the finished image.
 * 
 * (For example, if `frameInterval` is `4` the frames are:
 *   - The initial frame
 *   - Then after the 4th pixel has been filled
 *   - Then after the 8th pixel has been filled
 *   - ...
 *   - The final frame, after all pixels have been filed)
 */ 
Animation FloodFilledImage::animate(unsigned frameInterval) const {
  /** @todo [Part 2] */
  /*
  Animation animation;
  // add initial frame
  animation.addFrame(png_);
  unsigned index = 0;
  unsigned ct = 0;
  while(index < traversal_.size()){
    // deal a single operation
    for(auto i : (*(traversal_[index]))){
      cout << "inside!!!" << endl;
      HSLAPixel* cur_pixel = png_.getPixel(i.x, i.y);
      *cur_pixel = colorpicker_[index]->getColor(i.x, i.y);
      ct++;
      if(ct % frameInterval == 0) animation.addFrame(png_);
    }
    cout << "out!!!" << endl;
    index++;
  }
  // add final frame
  animation.addFrame(png_);
  return animation;
  */
 Animation animation;
 animation.addFrame(png_);
 for(unsigned i = 0; i < traversal_.size(); i++){
  ImageTraversal* cur_tra = traversal_[i];
  ColorPicker* cur_Pick = colorpicker_[i];
  unsigned count = 0;
  for (const Point& p : *(cur_tra)){
    if(count == frameInterval){
      animation.addFrame(png_);
      count = 0;
    }
    HSLAPixel& cur_pixel = *(png_.getPixel(p.x, p.y));
    cur_pixel = cur_Pick->getColor(p.x, p.y);
    count++;
    cout << "inside!!!" << endl;
  }
  cout << "out!!!" << endl;
  animation.addFrame(png_);
 }
 return animation;
}
